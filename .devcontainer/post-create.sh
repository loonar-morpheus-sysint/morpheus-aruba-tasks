#!/bin/bash
# Script executado ap√≥s cria√ß√£o do container

set -e

echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo "üîß Configurando ambiente de desenvolvimento Morpheus Aruba Tasks"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

# Fun√ß√£o para verificar e exibir vers√£o de ferramenta
check_tool() {
  local tool_name="$1"
  local tool_cmd="$2"
  local version_flag="${3:---version}"

  if command -v "${tool_cmd}" &> /dev/null; then
    local version
    version=$("${tool_cmd}" "${version_flag}" 2>&1 | head -n 1) || true
    echo "‚úÖ ${tool_name}: ${version}"
    return 0
  else
    echo "‚ùå ${tool_name} n√£o encontrado"
    return 1
  fi
}

echo ""
echo "üì¶ Verificando ferramentas instaladas..."
check_tool "Git" "git" "--version" || true
check_tool "GitHub CLI" "gh" "--version" || true
check_tool "Curl" "curl" "--version" || true
check_tool "jq" "jq" "--version" || true
echo "üî® Ferramentas Core:"
check_tool "Git" "git" "--version"
check_tool "GitHub CLI" "gh" "--version"
check_tool "Curl" "curl" "--version"
check_tool "jq" "jq" "--version"

# Python Ecosystem
echo ""
echo "üêç Ecossistema Python:"
check_tool "Python" "python3" "--version"
check_tool "pip" "pip3" "--version"

# Instala Aider AI
echo ""
echo "ü§ñ Instalando Aider AI..."
if pip3 install --user --quiet aider-chat 2>/dev/null; then
  echo "‚úÖ Aider instalado com sucesso"
  # Garante que o diret√≥rio de bin√°rios do usu√°rio est√° no PATH
  export PATH="/home/vscode/.local/bin:$PATH"
  echo "export PATH=\"/home/vscode/.local/bin:\$PATH\"" >> /home/vscode/.bashrc
else
  echo "‚ùå Falha ao instalar Aider"
fi

# Continua verifica√ß√£o de ferramentas Python
check_tool "pylint" "pylint" "--version" || true
check_tool "flake8" "flake8" "--version" || true
check_tool "black" "black" "--version" || true
check_tool "mypy" "mypy" "--version" || true
check_tool "bandit" "bandit" "--version" || true
check_tool "pytest" "pytest" "--version" || true
check_tool "Aider AI" "aider" "--version" || true

# Node.js Ecosystem
echo ""
echo "üì¶ Ecossistema Node.js:"
check_tool "Node.js" "node" "--version" || true
check_tool "npm" "npm" "--version" || true
check_tool "markdownlint" "markdownlint" "--version" || true
check_tool "prettier" "prettier" "--version" || true
check_tool "typescript" "tsc" "--version" || true

# Bash Development
echo ""
echo "üêö Ferramentas Bash:"
check_tool "shellcheck" "shellcheck" "--version" || true
check_tool "shfmt" "shfmt" "--version" || true
check_tool "BATS" "bats" "--version" || true
check_tool "yamllint" "yamllint" "--version" || true
check_tool "bash-language-server" "bash-language-server" "--version" || true
check_tool "inotifywait" "inotifywait" "--help" || true

# Security & Quality
echo ""
echo "üîí Ferramentas de Seguran√ßa e Qualidade:"
check_tool "pre-commit" "pre-commit" "--version" || true
check_tool "detect-secrets" "detect-secrets" "--version" || true
check_tool "ansible-lint" "ansible-lint" "--version" || true

echo ""
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo "‚öôÔ∏è  Configurando hooks e ferramentas..."
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

# Instala hooks do pre-commit
if [[ -f .pre-commit-config.yaml ]]; then
  echo "üìã Instalando hooks do pre-commit..."
  if pre-commit install; then
    echo "‚úÖ Pre-commit hooks instalados"
  else
    echo "‚ö†Ô∏è  Falha ao instalar pre-commit hooks"
  fi

  if pre-commit install --hook-type commit-msg; then
    echo "‚úÖ Commit-msg hooks instalados"
  else
    echo "‚ö†Ô∏è  Falha ao instalar commit-msg hooks"
  fi
else
  echo "‚ö†Ô∏è  Arquivo .pre-commit-config.yaml n√£o encontrado"
fi

# Configura permiss√µes de execu√ß√£o para scripts
echo ""
echo "üîë Configurando permiss√µes de execu√ß√£o..."
if [[ -d "/workspaces/morpheus-aruba-tasks" ]]; then
  chmod +x /workspaces/morpheus-aruba-tasks/*.sh 2>/dev/null || true
  echo "‚úÖ Permiss√µes configuradas para scripts .sh"
fi

# Configura√ß√£o do Git e arquivos de configura√ß√£o
echo ""
echo "üîß Configurando Git e arquivos de configura√ß√£o..."
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

# Verificar se .gitconfig foi montado do host
if [[ -f /home/vscode/.gitconfig ]]; then
  echo "‚úÖ .gitconfig montado do host"
  echo "   Nome: $(git config --global user.name 2>/dev/null || echo 'N√£o configurado')"
  echo "   Email: $(git config --global user.email 2>/dev/null || echo 'N√£o configurado')"
else
  echo "‚ö†Ô∏è  .gitconfig n√£o encontrado, configurando valores padr√£o..."
  # Configurar Git se n√£o estiver configurado
  if ! git config --global user.name >/dev/null 2>&1; then
    echo "‚öôÔ∏è  Configurando nome do usu√°rio Git..."
    git config --global user.name "DevContainer User"
  fi

  if ! git config --global user.email >/dev/null 2>&1; then
    echo "‚öôÔ∏è  Configurando email do usu√°rio Git..."
    git config --global user.email "user@devcontainer.local"
  fi

  echo "‚úÖ Git configurado:"
  echo "   Nome: $(git config --global user.name)"
  echo "   Email: $(git config --global user.email)"
fi

# Verificar se configura√ß√£o do GitHub CLI foi montada
if [[ -d /home/vscode/.config/gh ]]; then
  echo "‚úÖ Configura√ß√£o GitHub CLI montada do host"

  # Verificar autentica√ß√£o
  if gh auth status &>/dev/null; then
    echo "‚úÖ GitHub CLI autenticado com sucesso"
    gh auth status 2>&1 | head -n 3 | sed 's/^/   /'
  else
    echo "‚ö†Ô∏è  GitHub CLI configurado mas n√£o autenticado"
    echo "   üí° Execute: gh auth login"
  fi
else
  echo "‚ö†Ô∏è  Configura√ß√£o GitHub CLI n√£o montada"
  echo "   üí° Para compartilhar autentica√ß√£o da WSL/host, adicione ao devcontainer.json:"
  echo "   \"mounts\": [\"source=\${localEnv:HOME}/.config/gh,target=/home/vscode/.config/gh,type=bind\"]"
fi

# Verificar chaves SSH
if [[ -d /home/vscode/.ssh ]] && [[ -n "$(ls -A /home/vscode/.ssh 2>/dev/null)" ]]; then
  echo "‚úÖ Chaves SSH montadas do host"
  echo "   Chaves dispon√≠veis:"
  ls -1 /home/vscode/.ssh/*.pub 2>/dev/null | sed 's|/home/vscode/.ssh/||' | sed 's/^/   - /' || echo "   (nenhuma chave p√∫blica encontrada)"
else
  echo "‚ö†Ô∏è  Chaves SSH n√£o montadas ou diret√≥rio vazio"
fi

# Configura√ß√µes adicionais do Git para o DevContainer
git config --global init.defaultBranch main 2>/dev/null || true
git config --global pull.rebase false 2>/dev/null || true
git config --global core.autocrlf input 2>/dev/null || true
echo "‚úÖ Configura√ß√µes adicionais do Git aplicadas"
echo "   Branch padr√£o: $(git config --global init.defaultBranch 2>/dev/null || echo 'main')"

# Cria diret√≥rios √∫teis se n√£o existirem
echo ""
echo "üìÅ Criando estrutura de diret√≥rios..."
mkdir -p logs backups tmp configs
echo "‚úÖ Diret√≥rios criados: logs/ backups/ tmp/ configs/"

# Informa√ß√µes do ambiente
echo ""
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo "‚ÑπÔ∏è  Informa√ß√µes do Ambiente"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
os_info=$(lsb_release -d 2>/dev/null | cut -f2-) || os_info="Unknown"
current_user=$(whoami 2>/dev/null) || current_user="Unknown"
echo "Sistema Operacional: ${os_info}"
echo "Shell: ${SHELL}"
echo "Usu√°rio: ${current_user}"
echo "Workspace: ${PWD}"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

# Valida configura√ß√£o do Aider
echo ""
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo "ü§ñ Validando configura√ß√£o do Aider AI"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

if command -v aider &> /dev/null; then
  echo "‚úÖ Aider est√° dispon√≠vel no PATH"

  # Verifica se o diret√≥rio ai-support existe
  if [[ -d "/workspaces/morpheus-aruba-tasks/ai-support" ]]; then
    echo "‚úÖ Diret√≥rio ai-support/ encontrado"

    # Verifica scripts
    if [[ -x "/workspaces/morpheus-aruba-tasks/ai-support/scripts/validate-aider.sh" ]]; then
      echo "‚úÖ Scripts de suporte dispon√≠veis"
    fi

    # Verifica config
    if [[ -f "/workspaces/morpheus-aruba-tasks/ai-support/config/.aider.conf.yml" ]]; then
      echo "‚úÖ Arquivo de configura√ß√£o encontrado"

      # Cria symlink se n√£o existir
      if [[ ! -L "/workspaces/morpheus-aruba-tasks/.aider.conf.yml" ]]; then
        ln -sf /workspaces/morpheus-aruba-tasks/ai-support/config/.aider.conf.yml \
               /workspaces/morpheus-aruba-tasks/.aider.conf.yml
        echo "‚úÖ Symlink de configura√ß√£o criado"
      fi
    fi

    # Verifica documenta√ß√£o
    if [[ -d "/workspaces/morpheus-aruba-tasks/ai-support/docs" ]]; then
      echo "‚úÖ Documenta√ß√£o dispon√≠vel em ./ai-support/docs/"
    fi
  else
    echo "‚ö†Ô∏è  Diret√≥rio ai-support/ n√£o encontrado"
  fi

  # Verifica vari√°veis de ambiente
  if [[ -n "${OPENAI_API_BASE}" ]]; then
    echo "‚úÖ OPENAI_API_BASE configurado: ${OPENAI_API_BASE}"
  else
    echo "‚ö†Ô∏è  OPENAI_API_BASE n√£o configurado"
  fi

  if [[ -n "${OPENAI_API_KEY}" ]]; then
    echo "‚úÖ OPENAI_API_KEY configurado (valor oculto)"
  else
    echo "‚ö†Ô∏è  OPENAI_API_KEY n√£o configurado"
    echo "   üí° Defina a vari√°vel de ambiente GITHUB_TOKEN para usar o GitHub Copilot"
  fi

  if [[ -n "${AIDER_MODEL}" ]]; then
    echo "‚úÖ Modelo configurado: ${AIDER_MODEL}"
  else
    echo "‚ö†Ô∏è  AIDER_MODEL n√£o configurado (usando padr√£o)"
  fi

  if [[ -n "${AIDER_CONFIG}" ]]; then
    echo "‚úÖ AIDER_CONFIG configurado: ${AIDER_CONFIG}"
  fi
else
  echo "‚ùå Aider n√£o est√° dispon√≠vel"
  echo "   üí° Execute: pip3 install aider-chat"
fi

# Iniciar watcher do AGENTS.md em background
echo ""
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo "üëÅÔ∏è  Iniciando AGENTS.md Watcher"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

if [[ -f "tools/watch-agents.sh" ]]; then
  # Torna o script execut√°vel
  chmod +x tools/watch-agents.sh

  # Inicia em background
  if ./tools/watch-agents.sh --background; then
    echo "‚úÖ AGENTS.md watcher iniciado em background"
    echo "   üìù Mudan√ßas no AGENTS.md ser√£o detectadas automaticamente"
    echo "   üìÑ Copilot instructions ser√£o regeneradas automaticamente"
    echo "   üìä Para verificar status: ./tools/watch-agents.sh --status"
    echo "   üõë Para parar: ./tools/watch-agents.sh --stop"
  else
    echo "‚ö†Ô∏è  Falha ao iniciar watcher (n√£o cr√≠tico)"
  fi
else
  echo "‚ö†Ô∏è  Script tools/watch-agents.sh n√£o encontrado"
fi

echo ""
echo "üéâ Configura√ß√£o conclu√≠da com sucesso!"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo ""
echo "üí° Dicas:"
echo "  ‚Ä¢ Execute 'shellcheck script.sh' para validar scripts"
echo "  ‚Ä¢ Execute 'markdownlint *.md' para validar documenta√ß√£o"
echo "  ‚Ä¢ Execute 'pre-commit run --all-files' para validar tudo"
echo "  ‚Ä¢ Use 'gh' para interagir com GitHub"
echo "  ‚Ä¢ Use 'aider' para desenvolvimento assistido por IA com GitHub Copilot"
echo "  ‚Ä¢ O AGENTS.md est√° sendo monitorado automaticamente! ‚ú®"
echo ""
echo "üöÄ Pronto para come√ßar o desenvolvimento!"
echo ""
