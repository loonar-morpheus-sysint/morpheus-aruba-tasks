{
  "version": "1.0",
  "generated": "2025-10-12T16:47:15Z",
  "source": "AGENTS.md",
  "instructions": "# AGENTS.md*Guide for Code Agents (AI and Human) - Aruba/Morpheus Automations*\n\n## PurposeThis document guides code agents (artificial intelligence and human developers) in creating Bash scripts for Aruba network automations integrated with Morpheus, following established standards of centralized logging, consistent naming and good development practices.**Reference**: This document follows the standards of the [agents.md](https://agents.md) initiative for documentation aimed at autonomous agents.\n\n## Architecture and Dependencies### commons.sh - Central LibraryAll scripts must use the `commons.sh` file as a basis for:- Standardized logging system (all syslog levels)- Common utility functions- Validation of environment variables- Consistent error handling### Mandatory Header Template**IMPORTANT**: Every script must follow this header template EXACTLY:```bash#!/bin/bash############################################################################# Script: script-name.sh# Description: Brief description of what the script does############################################################################## Detailed description (optional)# May contain multiple lines explaining the purpose,# parameters, environment variables, examples, etc.############################################################################## Load common library (must be the first functional line)source \"$(dirname \"${BASH_SOURCE[0]}\")/commons.sh\"# Rest of the script...```**MANDATORY**: The lines `# Script:` and `# Description:` must be present EXACTLY in this format. BATS tests validate this standard.\n\n## Naming Conventions### Files- **REQUIRED**: Use hyphens (`-`) to separate words- **DEFAULT**: `verb-noun.sh`- **Examples**: `create-vrf.sh`, `install-aruba-cli.sh`, `backup-config.sh`### Functions- **DEFAULT**: `verb_noun()` (underscore)- **Prefix**: Use prefix when necessary (`aruba_authenticate`, `morpheus_deploy`)- **Examples**: `validate_config()`, `aruba_check_auth()`, `create_backup()`### Variables- **GLOBAL**: `UPPERCASE_WITH_UNDERSCORE`- **Locations**: `tiny_com_underscore`- **Examples**: `ARUBA_HOST`, `CONFIG_PATH`, `backup_file`**IMPORTANT - Nomenclature in English**:- **MANDATORY**: Always use variable names in Portuguese- **PRIORITY**: Readability over brevity- **Correct examples**: `config_file`, `BACKUP_PATH`, `device_list`- **Incorrect examples**: `cfg_file`, `BKPATH`, `devlist`\n\n## Logging Standard### Mandatory Logging in Functions**CRITICAL RULE**: ALL functions MUST have input and output logging. This is a mandatory BATS validation.```bashmy_function() {  _log_func_enter \"minha_funcao\" # ← REQUIRED: First line of the function  local param=\"$1\"  log_info \"Running operation X\" # Important operations  log_info \"Collecting system information\"  if aoscx \"show version\" > \"system_info.txt\"; then    log_success \"Information collected in system_info.txt\"    _log_func_exit_ok \"minha_funcao\" # ← REQUIRED: Before return 0    return 0  else    log_error \"Information collection failed\"    _log_func_exit_fail \"minha_funcao\" \"1\" # ← REQUIRED: Before return 1    return 1  fi}```**IMPORTANT**:- `_log_func_enter` must be the FIRST line of every function- `_log_func_exit_ok` must precede ALL `return 0`- `_log_func_exit_fail` must precede ALL `return 1` (or other error codes)- The function name must be EXACTLY the same in enter/exit\n\n## Mandatory Script Structure### Main() function - REQUIRED**CRITICAL**: Every executable script MUST have a `main()` function and sourcing protection:```bashmain() {  _log_func_enter \"main\"  # Main script logic here  log_info \"Starting processing...\"  # Your code...  _log_func_exit_ok \"main\"  return 0}# Protection: execute main() only if script is called directly (not sourced)if [[ \"${BASH_SOURCE[0]}\" == \"${0}\" ]]; then  main \"$@\"fi```**WHY**: This allows the script to be both executable and sourced by other scripts.### Dependency Validation**MANDATORY**: Always validate dependencies BEFORE using them:```bashcheck_command() {  _log_func_enter \"check_command\"  local cmd=\"$1\"  if command -v \"${cmd}\" &> /dev/null; then    log_success \"Command '${cmd}' is available\"    _log_func_exit_ok \"check_command\"    return 0  else    log_error \"Command '${cmd}' is not available\"    _log_func_exit_fail \"check_command\" \"1\"    return 1  fi}# Usage:if ! check_command \"python3\"; then  log_error \"python3 is required but not installed\"  exit 1fi```**NEVER** assume a command exists. **ALWAYS** validate with `command -v`.\n\n## Guidelines for AI Agents### When to Create New Scripts1. **ALWAYS** use the EXACT header template (Script: / Description:)2. **ALWAYS** include `commons.sh` as the first functional line3. **ALWAYS** create `main()` function with sourcing protection4. **ALWAYS** implement logging `_log_func_enter` and `_log_func_exit_*` in ALL functions5. **ALWAYS** use hyphenated naming for files6. **ALWAYS** validate dependencies with `command -v` before using7. **ALWAYS** validate parameters and environment variables8. **ALWAYS** use variable names in English (prioritize readability over brevity)9. **ALWAYS** Global variables must always be in UPPERCASE and local variables in lowercase. Words separated with underscores.### Quality Checklist (BATS Validation)**CRITICAL**: The following items are AUTOMATICALLY VALIDATED by BATS tests:#### Script Structure (REQUIRED)- [ ] Header contains `# Script: script-name.sh` (exact format)- [ ] Header contains `# Description: ...` (exact format)- [ ] Correct shebang: `#!/bin/bash` or `#!/usr/bin/env bash`- [ ] Script uses `source.*commons.sh`- [ ] Script has `main()` function implemented. Except commons.sh- [ ] File name follows kebab-case pattern (`name-with-hyphens.sh`)- [ ] Script is executable (`chmod +x`)#### Functions (MANDATORY)- [ ] Function `main()` exists and is implemented- [ ] ALL functions have `_log_func_enter \"nome_funcao\"` as the first line- [ ] ALL functions have `_log_func_exit_ok` before `return 0`- [ ] ALL functions have `_log_func_exit_fail` before `return 1`- [ ] Script has protection: `if [[ \"${BASH_SOURCE[0]}\" == \"${0}\" ]]; then main \"$@\"; fi`#### Logging and Errors (MANDATORY)- [ ] Script uses log functions: `log_info`, `log_error`, `log_success`, `log_warning`- [ ] Script has error handling: `return 1` or `exit 1`- [ ] Script uses proper return codes#### Validations (MANDATORY)- [ ] Validates necessary environment variables (e.g. `ARUBA_HOST`)- [ ] Validate dependencies with `command -v` before using- [ ] Validates mandatory parameters#### Documentation (MANDATORY)- [ ] Descriptive comments in main sections- [ ] Consistent use of log levels**TIP**: Run `./run-tests.sh` to automatically validate all of these items.\n\n## Code and Documentation Validation### Mandatory Validation of Shell Scripts**ALL** Bash scripts (`.sh`) must be validated with **shellcheck** before being committed to the repository. This is a mandatory practice that guarantees:- Detection of syntactic and semantic errors- Identification of bad practices and common pitfalls- Compliance with POSIX standards where applicable- More robust and maintainable code#### How to Validate Scripts with shellcheck**Installation:**```bash# Ubuntu/Debiansudo apt-get install shellcheck# macOSbrew install shellcheck# Fedorasudo dnf install shellcheck```**Example of use:**```bash# Validate a single scriptshellcheck my-script.sh# Validate all scripts in the directoryshellcheck *.sh# Validate with specific severity (error, warning, info, style)shellcheck -S warn my-script.sh```**Example of expected output:**```bash$ shellcheck create-vrf.shIn create-vrf.sh line 42:  if [$? -eq 0 ]; then       ^-- SC2181: Check exit code directly with e.g. 'if mycmd;', not indirectly with $?.```**IMPORTANT**: Fix all warnings and errors reported by shellcheck before committing. Scripts with critical warnings should not be accepted into the repository.### Mandatory Validation of Markdown Files**ALL** Markdown files (`.md`) must be validated with **markdownlint** to ensure standardization, readability and consistency in documentation. This is a mandatory practice that guarantees:- Consistent formatting throughout documentation- Improved readability- Compliance with established style standards- Professional and easy-to-maintain documentation#### How to Validate Markdown with markdownlint**Installation:**```bash# Via npm (Node.js required)npm install -g markdownlint-cli# Via yarnyarn global add markdownlint-cli```**Example of use:**```bash# Validate a specific filemarkdownlint README.md# Validate all Markdown filesmarkdownlint *.md# Automatically validate and fix simple issuesmarkdownlint --fix AGENTS.md# Validate with custom configurationmarkdownlint -c .markdownlint.json *.md```**Example of expected output:**```bash$ markdownlint AGENTS.mdAGENTS.md:15 MD022/blanks-around-headings Headings should be surrounded by blank linesAGENTS.md:23 MD031/blanks-around-fences Fenced code blocks should be surrounded by blank lines```**IMPORTANT**: Fix all warnings reported by markdownlint before committing. Documentation must follow consistent standards across the project.### Integration into the Development Workflow#### Before Committing**For Bash Scripts:**```bash# 1. Run shellcheckshellcheck your-script.sh# 2. Fix all reported issues# 3. Run again until there are no warnings#4. Commitgit add your-script.shgit commit -m \"Add: New script validated with shellcheck\"```**For Markdown Files:**```bash# 1. Run markdownlintmarkdownlint your-document.md# 2. Fix the issues or use --fix for automatic fixesmarkdownlint --fix your-document.md# 3. Review the changes#4. Commitgit add your-document.mdgit commit -m \"Docs: Update validated with markdownlint\"```#### Automation with Git Hooks (Recommended)Consider creating a `.git/hooks/pre-commit` for automatic validation:```bash#!/bin/bash# .git/hooks/pre-commitecho \"Running validations...\"# Validate modified scriptsfor file in $(git diff --cached --name-only --diff-filter=ACM | grep '\\.sh$'); of  echo \"Validating $file with shellcheck...\"  shellcheck \"$file\" || exit 1done# Validate modified Markdown filesfor file in $(git diff --cached --name-only --diff-filter=ACM | grep '\\.md$'); of  echo \"Validating $file with markdownlint...\"  markdownlint \"$file\" || exit 1doneecho \"✓ All validations passed!\"exit 0```### Summary of Good Validation Practices✅ **MANDATORY**: Validate all `.sh` scripts with shellcheck✅ **MANDATORY**: Validate all `.md` files with markdownlint✅ **RECOMMENDED**: Use git hooks for automation✅ **RECOMMENDED**: Integrate validations into the CI/CD pipeline✅ **GOOD PRACTICE**: Fix all warnings, not just errors✅ **GOOD PRACTICE**: Run validations locally before pushing\n\n## Standards Maintenance### For Human Agents- Review this document before creating new scripts- Use existing scripts as reference- Contribute improvements to this guide### For AI Agents- Always reference this document as a basis- Maintain consistency with established standards- Apply all guidelines without exception- Prioritize readability and maintainability\n\n## Complete Script TemplateUse this template as the basis for ALL new scripts:```bash#!/bin/bash############################################################################# Script: script-name.sh# Description: Brief description of what the script does############################################################################## DETAILED DESCRIPTION:# Full explanation of the purpose of the script## ENVIRONMENTAL VARIABLES:# VARIABLE_REQUIRED: Description of the variable## USE:# ./script-name.sh [options]## EXAMPLES:# ./script-name.sh --parameter value############################################################################## Load common librarySCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"# shellcheck disable=SC1091source \"${SCRIPT_DIR}/commons.sh\"############################################################################# Functions############################################################################# Example functionexample_function() {  _log_func_enter \"example_function\"  local param=\"$1\"  # Parameter validation  if [[ -z \"${param}\" ]]; then    log_error \"Required parameter not provided\"    _log_func_exit_fail \"function_example\" \"1\"    return 1  fi  log_info \"Processing: ${param}\"  # Your logic here  if any_command \"${param}\"; then    log_success \"Operation successful\"    _log_func_exit_ok \"example_function\"    return 0  else    log_error \"Operation failed\"    _log_func_exit_fail \"function_example\" \"1\"    return 1  fi}# Validate dependenciescheck_dependencies() {  _log_func_enter \"check_dependencies\"  local deps=(\"python3\" \"pip3\" \"git\")  for cmd in \"${deps[@]}\"; of    if ! command -v \"${cmd}\" &> /dev/null; then      log_error \"Dependency not found: ${cmd}\"      _log_func_exit_fail \"check_dependencies\" \"1\"      return 1    fi    log_info \"Dependency OK: ${cmd}\"  done  _log_func_exit_ok \"check_dependencies\"  return 0}############################################################################# Main function############################################################################main() {  _log_func_enter \"main\"  log_section \"SCRIPT NAME\"  log_info \"Starting processing...\"  # Validate dependencies  if ! check_dependencies; then    log_error \"Dependency validation failed\"    _log_func_exit_fail \"main\" \"1\"    exit 1  fi  # Validate environment variables  if [[ -z \"${REQUIRED_VARIABLE:-}\" ]]; then    log_error \"REQUIRED_VARIABLE not defined\"    _log_func_exit_fail \"main\" \"1\"    exit 1  fi  # Process arguments  while [[ $# -gt 0 ]]; of    case $1 in      --help|-h)        show_usage        _log_func_exit_ok \"main\"        exit 0        ;;      --parameter)        PARAMETER=\"$2\"        shift 2        ;;      *)        log_error \"Unknown parameter: $1\"        show_usage        _log_func_exit_fail \"main\" \"1\"        exit 1        ;;    esac  done  # Execute main logic  if function_example \"${PARAMETER}\"; then    log_success \"Script completed successfully\"    _log_func_exit_ok \"main\"    exit 0  else    log_error \"Script failed\"    _log_func_exit_fail \"main\" \"1\"    exit 1  fi}# Run main only if script is called directlyif [[ \"${BASH_SOURCE[0]}\" == \"${0}\" ]]; then  main \"$@\"fi```\n\n## Common Mistakes to Avoid### ❌ DON’T```bash# ❌ Header without default format# script_name.sh - Description# ❌ Function without loggingfunction() {  echo \"doing something\"  return 0}# ❌ Loose code (without main)echo \"Starting...\"do_somethingexit 0# ❌ Use command without validatingpip3 install package # What if pip3 doesn't exist?# ❌ Exit/Return without loggingif error; then  return 1 # Missing _log_func_exit_failfi```### ✅ DO```bash# ✅ Standardized header# Script: script-name.sh# Description: What the script does# ✅ Full logging functionfunction() {  _log_func_enter \"function\"  log_info \"Doing something\"  _log_func_exit_ok \"function\"  return 0}# ✅ Code in main()main() {  _log_func_enter \"main\"  log_info \"Starting...\"  do_something  _log_func_exit_ok \"main\"  exit 0}# ✅ Validate before useif ! command -v pip3 &> /dev/null; then  log_error \"pip3 not found\"  exit 1fipip3 install package# ✅ Exit/Return with loggingif error; then  _log_func_exit_fail \"function\" \"1\"  return 1fi```---**Note**: This document must be updated as new standards are established in the project. Always keep the most recent version as a reference.**Latest Update**: Added templates and detailed checklist based on corrections identified by BATS tests (October 2025).\n\n"
}
